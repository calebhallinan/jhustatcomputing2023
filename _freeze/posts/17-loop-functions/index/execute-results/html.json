{
  "hash": "e3790204d13f21b4afd363944fe3ec0b",
  "result": {
    "markdown": "---\ntitle: \"17 - Vectorization and loop functionals\"\nauthor:\n  - name: Leonardo Collado Torres\n    url: http://lcolladotor.github.io/\n    affiliations:\n      - id: libd\n        name: Lieber Institute for Brain Development\n        url: https://libd.org/\n      - id: jhsph\n        name: Johns Hopkins Bloomberg School of Public Health Department of Biostatistics\n        url: https://publichealth.jhu.edu/departments/biostatistics\ndescription: \"Introduction to vectorization and loop functionals\"\ncategories: [module 4, week 5, R, programming, functions]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  <https://rafalab.github.io/dsbook/programming-basics.html#vectorization>\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://rdpeng.github.io/Biostat776/lecture-loop-functions>\n-   <https://rafalab.github.io/dsbook/programming-basics.html#vectorization>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand how to perform vector arithmetics in R\n-   Implement the 5 functional loops in R (vs e.g. for loops) in R\n:::\n\n# Vectorization\n\nWriting `for` and `while` loops are useful and easy to understand, but in R we rarely use them.\n\nAs you learn more R, you will realize that **vectorization** is preferred over for-loops since it results in shorter and clearer code.\n\n## Vector arithmetics\n\n### Rescaling a vector\n\nIn R, arithmetic operations on **vectors occur element-wise**. For a quick example, suppose we have height in inches:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\n```\n:::\n\n\nand want to convert to centimeters.\n\nNotice what happens when we multiply inches by 2.54:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninches * 2.54\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80\n```\n:::\n:::\n\n\nIn the line above, we **multiplied each element** by 2.54.\n\nSimilarly, if for each entry we want to compute how many inches taller or shorter than 69 inches (the average height for males), we can subtract it from every entry like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninches - 69\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0 -7 -3  1  1  4 -2  4 -2  1\n```\n:::\n:::\n\n\n### Two vectors\n\nIf we have **two vectors of the same length**, and we sum them in R, they will be **added entry by entry** as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\ny <- 1:10 \nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n:::\n\n\nThe same holds for other mathematical operations, such as `-`, `*` and `/`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:10\nx*y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\n# Functional loops\n\nWhile `for` loops are perfectly valid, when you use vectorization in an element-wise fashion, there is no need for `for` loops because we can apply what are called functional loops.\n\n**Functional loops** are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here are a list of them:\n\n-   `lapply()`: Loop over a list and evaluate a function on each element\n\n-   `sapply()`: Same as `lapply` but try to simplify the result\n\n-   `apply()`: Apply a function over the margins of an array\n\n-   `tapply()`: Apply a function over subsets of a vector\n\n-   `mapply()`: Multivariate version of `lapply` (won't cover)\n\nAn auxiliary function `split()` is also useful, particularly in conjunction with `lapply()`.\n\n## `lapply()`\n\nThe `lapply()` function does the following simple series of operations:\n\n1.  it loops over a list, iterating over each element in that list\n2.  it applies a *function* to each element of the list (a function that you specify)\n3.  and returns a list (the `l` in `lapply()` is for \"list\").\n\nThis function takes three arguments: (1) a list `X`; (2) a function (or the name of a function) `FUN`; (3) other arguments via its `...` argument. If `X` is not a list, it will be coerced to a list using `as.list()`.\n\nThe body of the `lapply()` function can be seen here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (X, FUN, ...) \n{\n    FUN <- match.fun(FUN)\n    if (!is.vector(X) || is.object(X)) \n        X <- as.list(X)\n    .Internal(lapply(X, FUN))\n}\n<bytecode: 0x12d12f9d0>\n<environment: namespace:base>\n```\n:::\n:::\n\n\n::: callout-tip\n### Note\n\nThe actual looping is done internally in C code for efficiency reasons.\n:::\n\nIt is important to remember that `lapply()` always returns a list, regardless of the class of the input.\n\n::: callout-tip\n### Example\n\nHere's an example of applying the `mean()` function to all elements of a list. If the original list has names, the the names will be preserved in the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(a = 1:5, b = rnorm(10))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4 5\n\n$b\n [1]  0.9398820  0.6808533 -0.5230355 -1.4199458 -0.9806165  0.2871580\n [7]  1.2836726 -1.1063673  1.4649872  0.4810928\n```\n:::\n\n```{.r .cell-code}\nlapply(x, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 3\n\n$b\n[1] 0.1107681\n```\n:::\n:::\n\n\nNotice that here we are passing the `mean()` function as an argument to the `lapply()` function.\n:::\n\n**Functions in R can be** used this way and can be **passed back and forth as arguments** just like any other object inR.\n\nWhen you pass a function to another function, you do not need to include the open and closed parentheses `()` like you do when you are **calling** a function.\n\n::: callout-tip\n### Example\n\nHere is another example of using `lapply()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nlapply(x, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 2.5\n\n$b\n[1] -0.3599091\n\n$c\n[1] 1.715792\n\n$d\n[1] 5.062643\n```\n:::\n:::\n\n:::\n\nYou can use `lapply()` to evaluate a function multiple times each with a different argument.\n\nNext is an example where I call the `runif()` function (to generate uniformly distributed random variables) four times, each time generating a different number of random numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:4\nlapply(x, runif)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 0.4687761\n\n[[2]]\n[1] 0.9249996 0.3011933\n\n[[3]]\n[1] 0.5811661 0.1755092 0.5232761\n\n[[4]]\n[1] 0.6459540 0.3708483 0.6723211 0.7998949\n```\n:::\n:::\n\n\n::: callout-tip\n### What happened?\n\nWhen you pass a function to `lapply()`, `lapply()` takes elements of the list and passes them as the *first argument* of the function you are applying.\n\nIn the above example, the first argument of `runif()` is `n`, and so the elements of the sequence `1:4` all got passed to the `n` argument of `runif()`.\n:::\n\nFunctions that you pass to `lapply()` may have other arguments. For example, the `runif()` function has a `min` and `max` argument too.\n\n::: callout-note\n### Question\n\nIn the example above I used the default values for `min` and `max`.\n\n-   How would you be able to specify different values for that in the context of `lapply()`?\n:::\n\nHere is where the `...` argument to `lapply()` comes into play. Any arguments that you place in the `...` argument will get passed down to the function being applied to the elements of the list.\n\nHere, the `min = 0` and `max = 10` arguments are passed down to `runif()` every time it gets called.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:4\nlapply(x, runif, min = 0, max = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 8.291326\n\n[[2]]\n[1] 8.893872 9.878169\n\n[[3]]\n[1] 5.5325986 0.4374242 7.2026176\n\n[[4]]\n[1] 1.6807689 0.2755822 8.5226424 9.5019399\n```\n:::\n:::\n\n\nSo now, instead of the random numbers being between 0 and 1 (the default), the are all between 0 and 10.\n\nThe `lapply()` function (and its friends) makes heavy use of *anonymous* functions. Anonymous functions are like members of [Project Mayhem](http://en.wikipedia.org/wiki/Fight_Club)---they have no names. These functions are generated \"on the fly\" as you are using `lapply()`. Once the call to `lapply()` is finished, the function disappears and does not appear in the workspace.\n\n::: callout-tip\n### Example\n\nHere I am creating a list that contains two matrices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2)) \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n$b\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n:::\n\n\nSuppose I wanted to extract the first column of each matrix in the list. I could write an anonymous function for extracting the first column of each matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(x, function(elt) { elt[,1] })\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2\n\n$b\n[1] 1 2 3\n```\n:::\n:::\n\n\nNotice that I put the `function()` definition right in the call to `lapply()`.\n:::\n\nThis is perfectly legal and acceptable. You can put an arbitrarily complicated function definition inside `lapply()`, but if it's going to be more complicated, it's probably a better idea to define the function separately.\n\nFor example, I could have done the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(elt) {\n        elt[, 1]\n}\nlapply(x, f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2\n\n$b\n[1] 1 2 3\n```\n:::\n:::\n\n\n::: callout-tip\n### Note\n\nNow the function is no longer anonymous; its name is `f`.\n:::\n\nWhether you use an anonymous function or you define a function first depends on your context. If you think the function `f` is something you are going to need a lot in other parts of your code, you might want to define it separately. But if you are just going to use it for this call to `lapply()`, then it is probably simpler to use an anonymous function.\n\n## `sapply()`\n\nThe `sapply()` function behaves similarly to `lapply()`; the only real difference is in the return value. `sapply()` will try to simplify the result of `lapply()` if possible. Essentially, `sapply()` calls `lapply()` on its input and then applies the following algorithm:\n\n-   If the result is a list where every element is length 1, then a vector is returned\n\n-   If the result is a list where every element is a vector of the same length (\\> 1), a matrix is returned.\n\n-   If it can't figure things out, a list is returned\n\nHere's the result of calling `lapply()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nlapply(x, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 2.5\n\n$b\n[1] -0.3561419\n\n$c\n[1] 1.078816\n\n$d\n[1] 5.020936\n```\n:::\n:::\n\n\nNotice that `lapply()` returns a list (as usual), but that each element of the list has length 1.\n\nHere's the result of calling `sapply()` on the same list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(x, mean) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         a          b          c          d \n 2.5000000 -0.3561419  1.0788156  5.0209365 \n```\n:::\n:::\n\n\nBecause the result of `lapply()` was a list where each element had length 1, `sapply()` collapsed the output into a numeric vector, which is often more useful than a list.\n\n## `split()`\n\nThe `split()` function takes a vector or other objects and splits it into groups determined by a factor or list of factors.\n\nThe arguments to `split()` are\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(split)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, f, drop = FALSE, ...)  \n```\n:::\n:::\n\n\nwhere\n\n-   `x` is a vector (or list) or data frame\n-   `f` is a factor (or coerced to one) or a list of factors\n-   `drop` indicates whether empty factors levels should be dropped\n\nThe combination of `split()` and a function like `lapply()` or `sapply()` is a common paradigm in R. The basic idea is that you can take a data structure, split it into subsets defined by another variable, and apply a function over those subsets. The results of applying that function over the subsets are then collated and returned as an object. This sequence of operations is sometimes referred to as \"map-reduce\" in other contexts.\n\nHere we simulate some data and split it according to a factor variable. Note that we use the `gl()` function to \"generate levels\" in a factor variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(rnorm(10), runif(10), rnorm(10, 1))\nf <- gl(3, 10) # generate factor levels\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\nLevels: 1 2 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit(x, f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1`\n [1] -0.88306749 -1.86719488  0.63289913  1.05916422 -0.55471433  0.14180641\n [7]  0.07777047 -0.09623353  0.80288817 -0.07352678\n\n$`2`\n [1] 0.52710414 0.78458044 0.85538500 0.11115802 0.43938934 0.30846324\n [7] 0.12611702 0.92352094 0.07062165 0.61957181\n\n$`3`\n [1] -0.67639542  0.72492785  0.10007215  0.29327660  0.85127149  0.50446636\n [7]  0.05115469  2.29881193 -0.63035160  2.09792647\n```\n:::\n:::\n\n\nA common idiom is `split` followed by an `lapply`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(split(x, f), mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1`\n[1] -0.07602086\n\n$`2`\n[1] 0.4765912\n\n$`3`\n[1] 0.5615161\n```\n:::\n:::\n\n\n### Splitting a Data Frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(datasets)\nhead(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n```\n:::\n:::\n\n\nWe can split the `airquality` data frame by the `Month` variable so that we have separate sub-data frames for each month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- split(airquality, airquality$Month)\nstr(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ 5:'data.frame':\t31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 41 36 12 18 NA 28 23 19 8 NA ...\n  ..$ Solar.R: int [1:31] 190 118 149 313 NA NA 299 99 19 194 ...\n  ..$ Wind   : num [1:31] 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n  ..$ Temp   : int [1:31] 67 72 74 62 56 66 65 59 61 69 ...\n  ..$ Month  : int [1:31] 5 5 5 5 5 5 5 5 5 5 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 6:'data.frame':\t30 obs. of  6 variables:\n  ..$ Ozone  : int [1:30] NA NA NA NA NA NA 29 NA 71 39 ...\n  ..$ Solar.R: int [1:30] 286 287 242 186 220 264 127 273 291 323 ...\n  ..$ Wind   : num [1:30] 8.6 9.7 16.1 9.2 8.6 14.3 9.7 6.9 13.8 11.5 ...\n  ..$ Temp   : int [1:30] 78 74 67 84 85 79 82 87 90 87 ...\n  ..$ Month  : int [1:30] 6 6 6 6 6 6 6 6 6 6 ...\n  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...\n $ 7:'data.frame':\t31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 135 49 32 NA 64 40 77 97 97 85 ...\n  ..$ Solar.R: int [1:31] 269 248 236 101 175 314 276 267 272 175 ...\n  ..$ Wind   : num [1:31] 4.1 9.2 9.2 10.9 4.6 10.9 5.1 6.3 5.7 7.4 ...\n  ..$ Temp   : int [1:31] 84 85 81 84 83 83 88 92 92 89 ...\n  ..$ Month  : int [1:31] 7 7 7 7 7 7 7 7 7 7 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 8:'data.frame':\t31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 39 9 16 78 35 66 122 89 110 NA ...\n  ..$ Solar.R: int [1:31] 83 24 77 NA NA NA 255 229 207 222 ...\n  ..$ Wind   : num [1:31] 6.9 13.8 7.4 6.9 7.4 4.6 4 10.3 8 8.6 ...\n  ..$ Temp   : int [1:31] 81 81 82 86 85 87 89 90 90 92 ...\n  ..$ Month  : int [1:31] 8 8 8 8 8 8 8 8 8 8 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 9:'data.frame':\t30 obs. of  6 variables:\n  ..$ Ozone  : int [1:30] 96 78 73 91 47 32 20 23 21 24 ...\n  ..$ Solar.R: int [1:30] 167 197 183 189 95 92 252 220 230 259 ...\n  ..$ Wind   : num [1:30] 6.9 5.1 2.8 4.6 7.4 15.5 10.9 10.3 10.9 9.7 ...\n  ..$ Temp   : int [1:30] 91 92 93 93 87 84 80 78 75 73 ...\n  ..$ Month  : int [1:30] 9 9 9 9 9 9 9 9 9 9 ...\n  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n:::\n\n\nThen we can take the column means for `Ozone`, `Solar.R`, and `Wind` for each sub-data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")])\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`5`\n   Ozone  Solar.R     Wind \n      NA       NA 11.62258 \n\n$`6`\n    Ozone   Solar.R      Wind \n       NA 190.16667  10.26667 \n\n$`7`\n     Ozone    Solar.R       Wind \n        NA 216.483871   8.941935 \n\n$`8`\n   Ozone  Solar.R     Wind \n      NA       NA 8.793548 \n\n$`9`\n   Ozone  Solar.R     Wind \n      NA 167.4333  10.1800 \n```\n:::\n:::\n\n\nUsing `sapply()` might be better here for a more readable output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")])\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               5         6          7        8        9\nOzone         NA        NA         NA       NA       NA\nSolar.R       NA 190.16667 216.483871       NA 167.4333\nWind    11.62258  10.26667   8.941935 8.793548  10.1800\n```\n:::\n:::\n\n\nUnfortunately, there are `NA`s in the data so we cannot simply take the means of those variables. However, we can tell the `colMeans` function to remove the `NA`s before computing the mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")], \n                 na.rm = TRUE)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                5         6          7          8         9\nOzone    23.61538  29.44444  59.115385  59.961538  31.44828\nSolar.R 181.29630 190.16667 216.483871 171.857143 167.43333\nWind     11.62258  10.26667   8.941935   8.793548  10.18000\n```\n:::\n:::\n\n\n## tapply\n\n`tapply()` is used to apply a function over subsets of a vector. It can be thought of as a combination of `split()` and `sapply()` for vectors only. I've been told that the \"t\" in `tapply()` refers to \"table\", but that is unconfirmed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(tapply)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)  \n```\n:::\n:::\n\n\nThe arguments to `tapply()` are as follows:\n\n-   `X` is a vector\n-   `INDEX` is a factor or a list of factors (or else they are coerced to factors)\n-   `FUN` is a function to be applied\n-   ... contains other arguments to be passed `FUN`\n-   `simplify`, should we simplify the result?\n\n::: callout-tip\n### Example\n\nGiven a vector of numbers, one simple operation is to take group means.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Simulate some data\nx <- c(rnorm(10), runif(10), rnorm(10, 1))\n## Define some groups with a factor variable\nf <- gl(3, 10)   \nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\nLevels: 1 2 3\n```\n:::\n\n```{.r .cell-code}\ntapply(x, f, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         1          2          3 \n0.03546858 0.50033323 1.23684289 \n```\n:::\n:::\n\n:::\n\nWe can also apply functions that return more than a single value. In this case, `tapply()` will not simplify the result and will return a list. Here's an example of finding the `range()` (min and max) of each sub-group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(x, f, range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1`\n[1] -1.597023  1.582242\n\n$`2`\n[1] 0.01799498 0.98731564\n\n$`3`\n[1] -0.1673642  2.8815083\n```\n:::\n:::\n\n\n## `apply()`\n\nThe `apply()` function is used to a evaluate a function (often an anonymous one) over the margins of an array. It is most often used to apply a function to the rows or columns of a matrix (which is just a 2-dimensional array). However, it can be used with general arrays, for example, to take the average of an array of matrices. Using `apply()` is not really faster than writing a loop, but it works in one line and is highly compact.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(apply)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (X, MARGIN, FUN, ..., simplify = TRUE)  \n```\n:::\n:::\n\n\nThe arguments to `apply()` are\n\n-   `X` is an array\n-   `MARGIN` is an integer vector indicating which margins should be \"retained\".\n-   `FUN` is a function to be applied\n-   `...` is for other arguments to be passed to `FUN`\n\n::: callout-tip\n### Example\n\nHere I create a 20 by 10 matrix of Normal random numbers. I then compute the mean of each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(rnorm(200), 20, 10)\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            [,1]        [,2]        [,3]         [,4]       [,5]       [,6]\n[1,] -0.01270296  0.12521307 -0.35347017 -0.288597192  0.4754956 -1.4952687\n[2,] -1.76025729 -0.36661801  1.57260727  0.909927684 -0.8722067  2.4145309\n[3,] -0.04541822 -0.08756584  0.09477815  0.587649433 -0.2839712 -0.3948512\n[4,] -0.79873007  2.33988787  0.04433525 -0.043574962  1.8351096 -1.4161750\n[5,]  0.57385840  0.22221005 -1.15025884  0.002239365 -1.1274753  0.2699411\n[6,] -0.79337310  0.15304664  0.05230485  2.088306453 -2.5307486  1.0901328\n            [,7]         [,8]       [,9]       [,10]\n[1,] -0.06995917 -0.970955222 -0.6081838  0.36135088\n[2,]  0.98219144  1.226671950  0.7388203  0.99107134\n[3,]  0.36028126  1.080908318 -1.4657096 -0.83599160\n[4,] -0.46741177 -0.341382567  0.6639626  0.90447006\n[5,] -0.63266831 -0.828562584 -0.5595121 -0.51470923\n[6,]  0.44488488 -0.005120275 -1.2554960 -0.09944684\n```\n:::\n\n```{.r .cell-code}\napply(x, 2, mean)  ## Take the mean of each column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -0.24958041  0.14629702 -0.14633652 -0.26691102 -0.15595976  0.07473874\n [7]  0.05314485  0.07476061 -0.30001733  0.14398756\n```\n:::\n:::\n\n:::\n\n::: callout-tip\n### Example\n\nI can also compute the sum of each row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(x, 1, sum)   ## Take the mean of each row\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -2.8370777  5.8367390 -0.9898905  2.7204911 -3.7449375 -0.8555091\n [7]  2.4826554  0.9494142 -3.9096827  0.2117756  0.3672752 -2.7321397\n[13]  2.4937133 -2.7042877 -4.6029774 -6.2231452 -1.9386089  0.5097158\n[19] -2.2691720  4.7181237\n```\n:::\n:::\n\n:::\n\n::: callout-tip\n### Note\n\nIn both calls to `apply()`, the return value was a vector of numbers.\n:::\n\nYou've probably noticed that the second argument is either a 1 or a 2, depending on whether we want row statistics or column statistics. What exactly *is* the second argument to `apply()`?\n\nThe `MARGIN` argument essentially indicates to `apply()` which dimension of the array you want to preserve or retain.\n\nSo when taking the mean of each column, I specify\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(x, 2, mean)\n```\n:::\n\n\nbecause I want to collapse the first dimension (the rows) by taking the mean and I want to preserve the number of columns. Similarly, when I want the row sums, I run\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(x, 1, mean)\n```\n:::\n\n\nbecause I want to collapse the columns (the second dimension) and preserve the number of rows (the first dimension).\n\n### Col/Row Sums and Means\n\n::: callout-tip\n### Pro-tip\n\nFor the special case of column/row sums and column/row means of matrices, we have some useful shortcuts.\n\n-   `rowSums` = `apply(x, 1, sum)`\n-   `rowMeans` = `apply(x, 1, mean)`\n-   `colSums` = `apply(x, 2, sum)`\n-   `colMeans` = `apply(x, 2, mean)`\n:::\n\nThe shortcut functions are heavily optimized and hence are **much** faster, but you probably won't notice unless you're using a large matrix.\n\nAnother nice aspect of these functions is that they are a bit more descriptive. It's arguably more clear to write `colMeans(x)` in your code than `apply(x, 2, mean)`.\n\n### Other Ways to Apply\n\nYou can do more than take sums and means with the `apply()` function.\n\n::: callout-tip\n### Example\n\nFor example, you can compute quantiles of the rows of a matrix using the `quantile()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(rnorm(200), 20, 10)\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            [,1]        [,2]       [,3]      [,4]       [,5]       [,6]\n[1,] -1.09759334 -0.58191082 -0.6190918 0.7545051 -1.6708063 -1.2382435\n[2,] -0.04952269  0.50872978  1.6895949 0.1657323  1.7746160  1.7427081\n[3,]  0.45414643  1.22539326  0.6284307 0.2973018  1.0887260  0.4581224\n[4,] -0.03995540  0.23679937 -0.7905091 0.6370128  0.7911886 -0.2637556\n[5,]  0.12208387 -1.41751608  1.2769118 0.8510867 -0.4888010 -0.1692706\n[6,] -1.31501439 -0.08597665 -0.7616683 0.7553028  1.1584617 -2.0701933\n           [,7]        [,8]        [,9]       [,10]\n[1,] -1.1974074  1.22719350 -0.32231319  1.16291606\n[2,] -0.6335309  0.95729514 -0.84747657  0.91182060\n[3,] -0.7138229 -1.88743158  0.07026544 -2.01649459\n[4,] -0.2273346  1.76161541 -1.26793435 -1.89014826\n[5,]  0.3346429 -0.75236320  0.31607231  0.09632038\n[6,] -1.0845780  0.02416961  0.50295930  1.93484470\n```\n:::\n\n```{.r .cell-code}\n## Get row quantiles\napply(x, 1, quantile, probs = c(0.25, 0.75))    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]        [,2]       [,3]       [,4]       [,5]       [,6]\n25% -1.1724539 0.004291043 -0.5178008 -0.6588207 -0.4089184 -1.0038506\n75%  0.4853005 1.506519993  0.5858536  0.5369595  0.3300002  0.6922169\n          [,7]       [,8]       [,9]      [,10]      [,11]      [,12]\n25% -0.9842272 -1.0220842 -0.7082846 -0.8992771 -0.3444137 -0.4086714\n75%  0.2951763  0.6737552  0.1853825  1.0853115  0.6014494  0.3695608\n         [,13]      [,14]        [,15]      [,16]       [,17]      [,18]\n25% -1.1790230 -0.7932644 -0.002708936 -0.5149016 -0.83974314 -0.7881085\n75%  0.1577916  0.9562642  1.100022074  0.4498309 -0.04954139  0.2352183\n         [,19]      [,20]\n25% 0.03656589 -0.7393304\n75% 0.35820288  0.5060296\n```\n:::\n:::\n\n\nNotice that I had to pass the `probs = c(0.25, 0.75)` argument to `quantile()` via the `...` argument to `apply()`.\n:::\n\n## Vectorizing a Function\n\nLet's talk about how we can **\"vectorize\" a function**.\n\nWhat this means is that we can write function that typically only takes single arguments and create a new function that can take vector arguments.\n\nThis is often needed when you want to plot functions.\n\n::: callout-tip\n### Example\n\nHere's an example of a function that computes the sum of squares given some data, a mean parameter and a standard deviation. The formula is $\\sum_{i=1}^n(x_i-\\mu)^2/\\sigma^2$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumsq <- function(mu, sigma, x) {\n        sum(((x - mu) / sigma)^2)\n}\n```\n:::\n\n\nThis function takes a mean `mu`, a standard deviation `sigma`, and some data in a vector `x`.\n\nIn many statistical applications, we want to minimize the sum of squares to find the optimal `mu` and `sigma`. Before we do that, we may want to evaluate or plot the function for many different values of `mu` or `sigma`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)       ## Generate some data\nsumsq(mu=1, sigma=1, x)  ## This works (returns one value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 201.5111\n```\n:::\n:::\n\n\nHowever, passing a vector of `mu`s or `sigma`s won't work with this function because it's not vectorized.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumsq(1:10, 1:10, x)  ## This is not what we want\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 121.9851\n```\n:::\n:::\n\n:::\n\nThere's even a function in R called `Vectorize()` that **automatically can create a vectorized version of your function**.\n\nSo we could create a `vsumsq()` function that is fully vectorized as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvsumsq <- Vectorize(sumsq, c(\"mu\", \"sigma\"))\nvsumsq(1:10, 1:10, x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 201.5111 127.6611 113.3086 108.0569 105.5217 104.0882 103.1900 102.5851\n [9] 102.1553 101.8371\n```\n:::\n:::\n\n\nPretty cool, right?\n\n# Summary\n\n-   The loop functions in R are very powerful because they allow you to conduct a series of operations on data using a compact form\n\n-   The operation of a loop function involves iterating over an R object (e.g. a list or vector or matrix), applying a function to each element of the object, and the collating the results and returning the collated results.\n\n-   Loop functions make heavy use of anonymous functions, which exist for the life of the loop function but are not stored anywhere\n\n-   The `split()` function can be used to divide an R object in to subsets determined by another variable which can subsequently be looped over using loop functions.\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Write a function `compute_s_n()` that for any given `n` computes the sum\n\n$$\nS_n = 1^2 + 2^2 + 3^2 + \\ldots + n^2\n$$\n\nReport the value of the sum when $n$ = 10.\n\n2.  Define an empty numerical vector `s_n` of size 25 using `s_n <- vector(\"numeric\", 25)` and store in the results of $S_1, S_2, \\ldots, S_n$ using a for-loop.\n\n3.  Repeat Q3, but this time use `sapply()`.\n\n4.  Plot `s_n` versus `n`. Use points defined by $n= 1, \\ldots, 25$\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   <https://rdpeng.github.io/Biostat776/lecture-loop-functions>\n-   <https://rafalab.github.io/dsbook/programming-basics.html#vectorization>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}