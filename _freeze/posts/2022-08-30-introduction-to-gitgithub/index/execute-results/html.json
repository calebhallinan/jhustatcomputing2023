{
  "hash": "3d5b1808c1f88c72a8cc71b9848e489a",
  "result": {
    "markdown": "---\ntitle: \"Introduction to git/GitHub\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Version control is a game changer; or how I learned to love git/GitHub\"\ndate: 2022-08-30\nimage: \"../../images/happygitwithr.png\"\ncategories: [module 1, week 1, programming, version control, git, GitHub]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  [Happy Git with R](https://happygitwithr.com) from Jenny Bryan\n2.  [Chapter on git and GitHub in `dsbook`](https://rafalab.github.io/dsbook/git.html) from Rafael Irizarry\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://andreashandel.github.io/MADAcourse>\n\n# Learning objectives\n\n::: callout-note\n\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Know what Git and GitHub are.\n-   Know why one might want to use them.\n-   Have created and set up a GitHub account.\n:::\n\n# Introduction to git/GitHub\n\nThis document gives a brief explanation of GitHub and how we will use it for this course.\n\n### git\n\n*Git* is what is called a *version control system* for file management. The main idea is that as you (and your collaborators) work on a project, the software tracks, and records any changes made by anyone.\n\n-   Similar to the \"track changes\" features in Microsoft Word, but more rigorous, powerful, and scaled up to multiple files\n-   Great for solo or collaborative work\n\n### GitHub\n\n*GitHub* is a hosting service on internet for git-aware folders and projects\n\n-   Similar to the DropBox or Google, but more structured, powerful, and programmatic\n-   Great for solo or collaborative work!\n-   Technically *GitHub* is distinct from *Git*. However, *GitHub* is in some sense the interface and *Git* the underlying engine (a bit like *RStudio* and *R*).\n\nSince we will only be using *Git* through *GitHub*, I tend to not distinguish between the two. In the following, I refer to all of it as just *GitHub*. Note that other interfaces to *Git* exist, e.g., *Bitbucket*, but *GitHub* is the most widely used one.\n\n### Why use git/GitHub?\n\nYou want to use *GitHub* to avoid this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![How not to use GitHub [image from PhD Comics]](../../images/phdversioncontrol.gif){width=80%}\n:::\n:::\n\n\n\\[[Source: PhD Comics](http://phdcomics.com/comics/archive_print.php?comicid=1531)\\]\n\n*GitHub* gives you a clean way to track your projects. It is also very well suited to collaborative work. Historically, version control was used for software development. However, it has become broader and is now used for many types of projects, including data science projects.\n\nTo learn a bit more about Git/GitHub and why you might want to use it, [read this article by Jenny Bryan](https://peerj.com/preprints/3159/).\n\n**Note her explanation of what's special with the `README.md` file on GitHub.**\n\n### What to (not) do\n\nGitHub is ideal if you have a project with a fair number of files, most of those files are text files (such as code, LaTeX, (R)markdown, etc.) and different people work on different parts of the project.\n\nGitHub is less useful if you have a lot of non-text files (e.g. Word or Powerpoint) and different team members might want to edit the same document at the same time. In that instance, a solution like Google Docs, Word+Dropbox, Word+Onedrive, etc. might be better.\n\n### How to use Git/GitHub\n\nGit and GitHub is fundamentally based on commands you type into the command line. Lots of online resources show you how to use the command line. This is the most powerful, and the way I almost always interact with git/GitHub. However, many folks find this the most confusing way to use git/GitHub. Alternatively, there are graphical interfaces.\n\n-   [GitHub itself](https://desktop.github.com/) provides a grapical interface with basic functionality.\n-   RStudio also has [Git/GitHub integration](https://happygitwithr.com/rstudio-git-github.html). Of course this only works for R project GitHub integration.\n-   There are also third party GitHub clients with many advanced features, most of which you won't need initially, but might eventually.\n\n**Note**: As student, you can (and should) upgrade to the Pro version of GitHub for free (i.e. access to unlimited private repositories is one benefit), see the [GitHub student developer pack](https://education.github.com/pack) on how to do this.\n\n# Getting Started\n\nOne of my favorite resources for getting started with git/GitHub is the Happy Git with R from Jenny Bryan:\n\n-   <https://happygitwithr.com>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![A screenshot of the Happy Git with R online book from Jenny Bryan](../../images/happygitwithr.png){width=80%}\n:::\n:::\n\n\nIt truly is one of the **best resources** out there for getting started with git/GitHub, especially with the integration to RStudio. Therefore, at this point, I will encourage all of you to go read through the online book.\n\nSome of you may only need to skim it, others will need to spend some time reading through it. Either way, I will bet that you won't regret the time investment.\n\n# Using git/GitHub in our course\n\nIn this course, you will use git/GitHub in the following ways:\n\n1.  Project 0 (optional) - You will create a website introducing yourself to folks in the course and deploy it on GitHub.\n2.  Projects 1-3 - You will be asked to practice using git locally (on your compute environment) to track your changes over time and, if you wish (but highly suggested), you can practice pushing your project solutions to a private GitHub repository on your GitHub account (i.e. `git add`, `git commit`, `git push`, `git pull`, etc) .\n\nLearning these skills will be useful down the road if you ever work collaboratively on a project (i.e. writing code as a group). In this scenario, you will use the skills you have been practicing in your projects to work together as a team in a single GitHub repository.\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n\n### Questions\n\n1.  What is version control?\n\n2.  What is the difference between git and GitHub?\n\n3.  What are other version controls software/tools that are available besides git?\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   [git and GitHub in the `dsbook`](https://rafalab.github.io/dsbook/git.html) by Rafael Irizarry\n:::\n\n\n## rtistry\n\n\n::: {.cell .fig-cap-location-top}\n::: {.cell-output-display}\n![](https://github.com/djnavarro/art/raw/master/static/gallery/flametree/extra/001_flametree_20_13.jpg)\n:::\n:::\n\n['Flametree' from Danielle Navarro <https://art.djnavarro.net>]\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}