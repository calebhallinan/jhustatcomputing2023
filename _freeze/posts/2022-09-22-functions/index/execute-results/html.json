{
  "hash": "7cbde4a033027e33a16c65837eee58bf",
  "result": {
    "markdown": "---\ntitle: \"Functions\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to writing functions in R\"\ndate: 2022-09-22\ncategories: [module 4, week 4, R, programming, functions]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1. <https://r4ds.had.co.nz/functions>\n2. <https://adv-r.hadley.nz/functions.html?#functions>\n3. <https://swcarpentry.github.io/r-novice-inflammation/02-func-R>\n\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- <https://rdpeng.github.io/Biostat776/lecture-functions>\n- <https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r>\n- <https://r4ds.had.co.nz/functions>\n- <https://r4ds.had.co.nz/functions.html#environment>\n\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n- Know how to create a function using `function()` in R\n- Know how to define named arguments inside a function with default values\n- Be able to use named matching or positional matching in the argument list\n- Understand what is lazy evaluation\n- Understand the the special `...` argument in a function definition\n\n:::\n\n# Introduction\n\nWriting functions is a **core activity** of an R programmer. It represents\nthe key step of the transition from a mere \"user\" to a developer who\ncreates new functionality for R. Functions are often used to\nencapsulate a sequence of expressions that need to be executed\nnumerous times, perhaps under slightly different conditions. Functions\nare also often written when code must be shared with others or the\npublic. \n\nThe writing of a function allows a developer to create an interface to\nthe code, that is explicitly specified with a set of **arguments** \n(or parameters). This\ninterface provides an abstraction of the code to potential users. This\nabstraction simplifies the users' lives because it relieves them from\nhaving to know every detail of how the code operates. In addition, the\ncreation of an interface allows the developer to communicate to the\nuser the aspects of the code that are important or are most relevant.\n\n\n## Functions in R\n\nFunctions in R are \"first class objects\", which means that they can be\ntreated much like any other R object. \n\n**Important facts about R functions**:\n\n- Functions can be passed as arguments to other functions. This is very handy for the various apply functions, like `lapply()` and `sapply()`.\n\n- Functions can be nested, so that you can define a function inside of\n  another function\n\nIf you are familiar with common language like C, these features might appear a bit strange. However, they are really important in R and can be useful for data analysis.\n\n## Your First Function\n\nFunctions are defined using the `function()` directive and are stored\nas R objects just like anything else. In particular, they are R\nobjects of class \"function\".\n\nHere's a simple function that takes no arguments and does nothing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function() {\n        ## This is an empty function\n}\n## Functions have their own class\nclass(f)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"function\"\n```\n:::\n\n```{.r .cell-code}\n## Execute this function\nf()       \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nNot very interesting, but it is a start. The next thing we can do is\ncreate a function that actually has a non-trivial **function body**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function() {\n        # this is the function body\n        cat(\"Hello, world!\\n\") \n}\nf()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\n```\n:::\n:::\n\n\nThe last aspect of a basic function is the **function arguments**. These\nare the options that you can specify to the user that the user may\nexplicitly set. For this basic function, we can add an argument that\ndetermines how many times \"Hello, world!\" is printed to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(num) {\n        for(i in seq_len(num)) {\n                cat(\"Hello, world!\\n\")\n        }\n}\nf(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\nHello, world!\nHello, world!\n```\n:::\n:::\n\n\nObviously, we could have just cut-and-pasted the `cat(\"Hello, world!\\n\")` code three times to achieve the same effect, but then we wouldn't be programming, would we? Also, it would be un-neighborly of you to give your code to someone else and force them to cut-and-paste the code however many times the need to see \"Hello, world!\".\n\n:::{.callout-tip}\n\n### Pro-tip\n\nIf you find yourself doing a lot of cutting and pasting, that's usually a good sign that you might need to write a function.\n\n:::\n\nFinally, the function above doesn't **return** anything. It just prints \"Hello, world!\" to the console `num` number of times and then exits. But often it is useful if a function returns something that perhaps can be fed into another section of code.\n\nThis next function returns the total number of characters printed to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(num) {\n        hello <- \"Hello, world!\\n\"\n        for(i in seq_len(num)) {\n                cat(hello)\n        }\n        chars <- nchar(hello) * num\n        chars\n}\nmeaningoflife <- f(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\nHello, world!\nHello, world!\n```\n:::\n\n```{.r .cell-code}\nprint(meaningoflife)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42\n```\n:::\n:::\n\n\nIn the above function, we did not have to indicate anything special in order for the function to return the number of characters. In R, the return value of a function is always the very last expression that is evaluated. Because the `chars` variable is the last expression that is evaluated in this function, that becomes the return value of the function.\n\nNote that there is a `return()` function that can be used to return an explicitly value from a function, but it is rarely used in R (we will discuss it a bit later in this lesson).\n\nFinally, in the above function, the user must specify the value of the argument `num`. If it is not specified by the user, R will throw an error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in f(): argument \"num\" is missing, with no default\n```\n:::\n:::\n\n\nWe can modify this behavior by setting a *default value* for the argument `num`. Any function argument can have a default value, if you wish to specify it. Sometimes, argument values are rarely modified (except in special cases) and it makes sense to set a default value for that argument. This relieves the user from having to specify the value of that argument every single time the function is called. \n\nHere, for example, we could set the default value for `num` to be 1, so that if the function is called without the `num` argument being explicitly specified, then it will print \"Hello, world!\" to the console once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(num = 1) {\n        hello <- \"Hello, world!\\n\"\n        for(i in seq_len(num)) {\n                cat(hello)\n        }\n        chars <- nchar(hello) * num\n        chars\n}\nf()    ## Use default value for 'num'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\nf(2)   ## Use user-specified value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\nHello, world!\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28\n```\n:::\n:::\n\n\nRemember that the function still returns the number of characters printed to the console.\n\n:::{.callout-tip}\n\n### Pro-tip\n\nThe `formals()` function returns a list of all the formal arguments of a function \n\n\n::: {.cell}\n\n```{.r .cell-code}\nformals(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$num\n[1] 1\n```\n:::\n:::\n\n\n:::\n\n\n## Summary\n\nWe have written a function that \n\n* has one *formal argument* named `num` with a *default value* of 1. The _formal arguments_ are the arguments included in the function definition. \n\n* prints the message \"Hello, world!\" to the console a number of times indicated by the argument `num`\n\n* *returns* the number of characters printed to the console\n\n\n\n# Arguments\n\n## Named arguments\n\nFunctions have **named arguments**, which can optionally have default values. Because all function arguments have names, they can be specified using their name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf(num = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\nHello, world!\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28\n```\n:::\n:::\n\n\nSpecifying an argument by its name is sometimes useful if a function has many arguments and it may not always be clear which argument is being specified. Here, our function only has one argument so there's no confusion.\n\n\n## Argument matching\n\nCalling an R function with arguments can be done in a variety of ways. This may be confusing at first, but it's really handy when doing interactive work at the command line. R functions arguments can be matched *positionally* or by name. Positional matching just means that R assigns the first value to the first argument, the second value to second argument, etc. So in the following call to `rnorm()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(rnorm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (n, mean = 0, sd = 1)  \n```\n:::\n\n```{.r .cell-code}\nmydata <- rnorm(100, 2, 1)              ## Generate some data\n```\n:::\n\n\n100 is assigned to the `n` argument, 2 is assigned to the `mean` argument, and 1 is assigned to the `sd` argument, all by positional matching.\n\nThe following calls to the `sd()` function (which computes the empirical standard deviation of a vector of numbers) are all equivalent. Note that `sd()` has two arguments: `x` indicates the vector of numbers and `na.rm` is a logical indicating whether missing values should be removed or not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Positional match first argument, default for 'na.rm'\nsd(mydata)                     \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.006837\n```\n:::\n\n```{.r .cell-code}\n## Specify 'x' argument by name, default for 'na.rm'\nsd(x = mydata)                 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.006837\n```\n:::\n\n```{.r .cell-code}\n## Specify both arguments by name\nsd(x = mydata, na.rm = FALSE)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.006837\n```\n:::\n:::\n\n\nWhen specifying the function arguments by name, it doesn't matter in what order you specify them. In the example below, we specify the `na.rm` argument first, followed by `x`, even though `x` is the first argument defined in the function definition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Specify both arguments by name\nsd(na.rm = FALSE, x = mydata)     \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.006837\n```\n:::\n:::\n\n\nYou can mix positional matching with matching by name. When an argument is matched by name, it is “taken out” of the argument list and the remaining unnamed arguments are matched in the order that they are listed in the function definition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(na.rm = FALSE, mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.006837\n```\n:::\n:::\n\n\nHere, the `mydata` object is assigned to the `x` argument, because it's the only argument not yet specified.\n\n\n:::{.callout-tip}\n\n### Pro-tip\n\nThe `args()` function displays the argument names and corresponding default values of a function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (num = 1) \nNULL\n```\n:::\n:::\n\n\n:::\n\n\nBelow is the argument list for the `lm()` function, which fits linear models to a dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (formula, data, subset, weights, na.action, method = \"qr\", \n    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n    contrasts = NULL, offset, ...) \nNULL\n```\n:::\n:::\n\n\nThe following two calls are equivalent.\n\n```r\nlm(data = mydata, y ~ x, model = FALSE, 1:100)\nlm(y ~ x, mydata, 1:100, model = FALSE)\n```\n\n\nEven though it’s legal, I don’t recommend messing around with the order of the arguments too much, since it can lead to some confusion.\n\nMost of the time, named arguments are useful on the command line when you have a long argument list and you want to use the defaults for everything except for an argument near the end of the list. Named arguments also help if you can remember the name of the argument and not its position on the argument list. For example, plotting functions often have a lot of options to allow for customization, but this makes it difficult to remember exactly the position of every argument on the argument list.\n\nFunction arguments can also be _partially_ matched, which is useful for interactive work. The order of operations when given an argument is\n\n1. Check for exact match for a named argument\n2. Check for a partial match\n3. Check for a positional match\n\nPartial matching should be avoided when writing longer code or programs, because it may lead to confusion if someone is reading the code. However, partial matching is very useful when calling functions interactively that have very long argument names.\n\n\n## Lazy Evaluation\n\nArguments to functions are evaluated _lazily_, so they are evaluated only as needed in the body of the function.\n\nIn this example, the function `f()` has two arguments: `a` and `b`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(a, b) {\n        a^2\n} \nf(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nThis function never actually uses the argument `b`, so calling `f(2)` will not produce an error because the 2 gets positionally matched to `a`. This behavior can be good or bad. It's common to write a function that doesn't use an argument and not notice it simply because R never throws an error.\n\nThis example also shows lazy evaluation at work, but does eventually result in an error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(a, b) {\n        print(a)\n        print(b)\n}\nf(45)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 45\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in print(b): argument \"b\" is missing, with no default\n```\n:::\n:::\n\n\nNotice that \"45\" got printed first before the error was triggered. This is because `b` did not have to be evaluated until after `print(a)`. Once the function tried to evaluate `print(b)` the function had to throw an error.\n\n\n## The `...` Argument\n\nThere is a special argument in R known as the `...` argument, which indicates a variable number of arguments that are usually passed on to other functions. The `...` argument is often used when extending another function and you don’t want to copy the entire argument list of the original function\n\nFor example, a custom plotting function may want to make use of the default `plot()` function along with its entire argument list. The function below changes the default for the `type` argument to the value `type = \"l\"` (the original default was `type = \"p\"`).\n\n```r\nmyplot <- function(x, y, type = \"l\", ...) {\n        plot(x, y, type = type, ...)         ## Pass '...' to 'plot' function\n}\n```\n\nGeneric functions use `...` so that extra arguments can be passed to methods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x1426abb80>\n<environment: namespace:base>\n```\n:::\n:::\n\n\n\n\nThe `...` argument is necessary when the number of arguments passed to the function cannot be known in advance. This is clear in functions like `paste()` and `cat()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(paste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n```\n:::\n\n```{.r .cell-code}\nargs(cat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (..., file = \"\", sep = \" \", fill = FALSE, labels = NULL, \n    append = FALSE) \nNULL\n```\n:::\n:::\n\n\nBecause both `paste()` and `cat()` print out text to the console by combining multiple character vectors together, it is impossible for those functions to know in advance how many character vectors will be passed to the function by the user. So the first argument to either function is `...`.\n\n## Arguments Coming After the `...` Argument\n\nOne catch with `...` is that any arguments that appear _after_ `...` on the argument list must be named explicitly and cannot be partially matched or matched positionally.\n\nTake a look at the arguments to the `paste()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(paste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n```\n:::\n:::\n\n\nWith the `paste()` function, the arguments `sep` and `collapse` must be named explicitly and in full if the default values are not going to be used.\n\nHere I specify that I want \"a\" and \"b\" to be pasted together and separated by a colon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"a\", \"b\", sep = \":\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a:b\"\n```\n:::\n:::\n\n\nIf I don't specify the `sep` argument in full and attempt to rely on partial matching, I don't get the expected result.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"a\", \"b\", se = \":\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a b :\"\n```\n:::\n:::\n\n\n\n# Functions are for humans and computers\n\nAs you start to write your own functions, it's important to keep in mind that functions are not just for the computer, but are also for humans. Technically, R does not care what your function is called, or what comments it contains, but these are important for **human readers**. This section discusses some things that you should bear in mind when writing functions that humans can understand.\n\n**The name of a function is important**. In an ideal world, you want the name of your function to be short but clearly describe what the function does. This is not always easy, but here are some tips. \n\nThe **function names** should be **verbs**, and **arguments** should be **nouns**. \n\nThere are some exceptions: nouns are ok if the function computes a very well known noun (i.e. `mean()` is better than `compute_mean()`). A good sign that a noun might be a better choice is if you are using a very broad verb like \"get\", \"compute\", \"calculate\", or \"determine\". Use your best judgement and do not be afraid to rename a function if you figure out a better name later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Too short\nf()\n\n# Not a verb, or descriptive\nmy_awesome_function()\n\n# Long, but clear\nimpute_missing()\ncollapse_years()\n```\n:::\n\n\nIf your function name is composed of multiple words, use \"snake_case\", where each lowercase word is separated by an underscore. \"camelCase\" is a popular alternative. It does not really matter which one you pick, the important thing is to be consistent: pick one or the other and stick with it. R itself is not very consistent, but there is nothing you can do about that. Make sure you do not fall into the same trap by making your code as consistent as possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Never do this!\ncol_mins <- function(x, y) {}\nrowMaxes <- function(y, x) {}\n```\n:::\n\n\nIf you have a family of functions that do similar things, make sure they have consistent names and arguments. Use a common prefix to indicate that they are connected. That is better than a common suffix because autocomplete allows you to type the prefix and see all the members of the family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\ninput_select()\ninput_checkbox()\ninput_text()\n\n# Not so good\nselect_input()\ncheckbox_input()\ntext_input()\n```\n:::\n\n\nWhere possible, avoid overriding existing functions and variables. It is impossible to do in general because so many good names are already taken by other packages, but avoiding the most common names from base R will avoid confusion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Don't do this!\nT <- FALSE\nc <- 10\nmean <- function(x) sum(x)\n```\n:::\n\n\nUse comments, lines starting with #, to explain the \"why\" of your code. You generally should avoid comments that explain the \"what\" or the \"how\". If you can’t understand what the code does from reading it, you should think about how to rewrite it to be more clear. \n\nDo you need to add some intermediate variables with useful names? Do you need to break out a subcomponent of a large function so you can name it? However, your code can never capture the reasoning behind your decisions: why did you choose this approach instead of an alternative? What else did you try that didn’t work? It’s a great idea to capture that sort of thinking in a comment.\n\n\n# Environment\n\nThe last component of a function is its **environment**. This is not something you need to understand deeply when you first start writing functions. However, it's important to know a little bit about environments because they are crucial to how functions work. \n\nThe **environment of a function** controls how R finds the value associated with a name. \n\nFor example, take this function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x) {\n  x + y\n} \n```\n:::\n\n\nIn many programming languages, this would be an error, because 1y1 is not defined inside the function. In R, this is valid code because R uses rules called **lexical scoping** to find the value associated with a name. Since `y` is not defined inside the function, R will look in the environment where the function was defined:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 100\nf(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 110\n```\n:::\n\n```{.r .cell-code}\ny <- 1000\nf(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1010\n```\n:::\n:::\n\n\nThis behavior seems like a recipe for bugs, and indeed you should avoid creating functions like this deliberately, but by and large it does not cause too many problems (especially if you regularly restart R to get to a clean slate).\n\nThe advantage of this behavior is that from a language standpoint it allows R to be very consistent. Every name is looked up using the same set of rules. For `f()` that includes the behavior of two things that you might not expect: `{` and `+`. This allows you to do devious things like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`+` <- function(x, y) {\n  if (runif(1) < 0.1) {\n    sum(x, y)\n  } else {\n    sum(x, y) * 1.1\n  }\n}\ntable(replicate(1000, 1 + 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  3 3.3 \n104 896 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(`+`)\n```\n:::\n\n\nThis is a common phenomenon in R. R places few limits on your power. You can do many things that you can't do in other programming languages. You can do many things that 99% of the time are extremely ill-advised (like overriding how addition works!). But this power and flexibility is what makes tools like `ggplot2` and `dplyr` possible. \n\n:::{.callout-tip}\n\n### More resources\n\nIf you are interested in learning more about scoping, check out\n\n- https://adv-r.hadley.nz/functions.html?#lexical-scoping\n- https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r.html\n\n:::\n\n\n\n# Summary\n\n- Functions can be defined using the `function()` directive and are assigned to R objects just like any other R object\n\n- Functions have can be defined with named arguments; these function arguments can have default values\n\n- Functions arguments can be specified by name or by position in the argument list\n\n- Functions always return the last expression evaluated in the function body\n\n- A variable number of arguments can be specified using the special `...` argument in a function definition.\n\n\n\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1. Practice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need? Can you rewrite it to be more expressive or less duplicative?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(is.na(x))\n\nx / sum(x, na.rm = TRUE)\n```\n:::\n\n\n2. Read the [complete lyrics](https://en.wikipedia.org/wiki/Little_Bunny_Foo_Foo) to \"Little Bunny Foo Foo\". There is a lot of duplication in this song. Extend the initial piping example to recreate the complete song, and use functions to reduce the duplication.\n\n3. Take a function that you’ve written recently and spend 5 minutes brainstorming a better name for it and its arguments.\n\n4. What does the `trim` argument to `mean()` do? When might you use it?\n\n5. The default value for the method argument to `cor()` is `c(\"pearson\", \"kendall\", \"spearman\")`. What does that mean? What value is used by default?\n\n\n:::\n\n### Additional Resources\n\n::: callout-tip\n\n- <https://rdpeng.github.io/Biostat776/lecture-functions>\n- <https://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r>\n- <https://r4ds.had.co.nz/functions>\n- <https://r4ds.had.co.nz/functions.html#environment>\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}