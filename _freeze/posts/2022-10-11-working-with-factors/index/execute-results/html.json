{
  "hash": "4d81c57923939bc7bfc4d32d7ad3ea56",
  "result": {
    "markdown": "---\ntitle: \"Factors\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Using factors to work with categorial variables\"\ndate: 2022-10-11\ncategories: [module 5, week 7, tidyverse, factors, categorial variables]\n---\n\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  [Wrangling Categorical Data in R](https://peerj.com/preprints/3163) by Amelia McNamara, Nicholas J Horton\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- [Wrangling Categorical Data in R](https://peerj.com/preprints/3163) by Amelia McNamara, Nicholas J Horton\n-   <https://r4ds.had.co.nz/factors>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n- How to create factors and some challenges working with them in base R\n- An introduction to the `forcats` package in the `tidyverse` to work with **cat**egorical variables in R\n\n:::\n\n# Introduction\n\n**Factors** are used for working with **categorical variables**, or variables that have a fixed and known set of possible values (income bracket, U.S. state, political affiliation).\n\nFactors are **useful when**\n\n- You want to **include categorical variables in regression models**\n- You want to **plot categorical data** (e.g. want to map categorical\nvariables to aesthetic attributes)\n- You want to **display character vectors in a non-alphabetical order**\n\n:::{.callout-tip}\n\n### Example\n\nImagine that you have a variable that records month:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n```\n:::\n\n\nUsing a string to record this variable has two problems:\n\n1. There are only twelve possible months, and there's nothing saving you from typos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx2 <- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n```\n:::\n\n\n2. It doesn't sort in a useful way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n```\n:::\n:::\n\n\n:::\n\n## Factor basics \n\nYou can fix both of these problems with a **factor**.\n\nTo create a factor you must start by creating a list of the valid **levels**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_levels <- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n```\n:::\n\n\nNow you can create a factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny1 <- factor(x1, levels = month_levels)\ny1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n```{.r .cell-code}\nsort(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n```{.r .cell-code}\nattributes(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$class\n[1] \"factor\"\n```\n:::\n:::\n\n\nAnd any values not in the level will be silently converted to NA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny2 <- factor(x2, levels = month_levels)\ny2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec  Apr  <NA> Mar \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\nIf you want to access the set of levels directly, you can do so with `levels()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(y2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n:::\n:::\n\n\n\n## Challenges working with categorical data\n\nWorking with categorical data can often be challenging. For example,\n\n1. What if the original data source for where the categorical data is getting ingested changes? If a domain expert is providing spreadsheet data at regular intervals, code that worked on the initial data may not generate an error message, but could silently produce incorrect results.\n2. What if a new level of a categorical  data is added in an updated dataset? \n3. If the categorical data coded with numerical values, it can be easy to break the relationship between category numbers and category labels without realizing it, thus losing the information encoded in a variable. \n\n:::{.callout-tip}\n\n### Example\n\nConsider a set of decades,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nx1_original <- c(10, 10, 20, 20, 40)\nx1_factor <- factor(x1_original)\nattributes(x1_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n[1] \"10\" \"20\" \"40\"\n\n$class\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\ntibble(x1_original, x1_factor) %>% \n  mutate(x1_numeric = as.numeric(x1_factor))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  x1_original x1_factor x1_numeric\n        <dbl> <fct>          <dbl>\n1          10 10                 1\n2          10 10                 1\n3          20 20                 2\n4          20 20                 2\n5          40 40                 3\n```\n:::\n:::\n\n\nInstead of creating a new variable with a numeric version of the value of the factor variable `x1_factor`, the variable is created with a factor number (i.e., 10 is mapped to 1, 20 is mapped\nto 2, and 40 is mapped to 3). \n\n:::\n\nThis result is unexpected because `base::as.numeric()` is intended to recover numeric information by coercing a character variable.\n\n\n:::{.callout-tip}\n\n### Example\n\nCompare the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(c(\"hello\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nas.numeric(factor(c(\"hello\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nIn the first example, R does not how to convert the character string to a numeric, but in the second example, it creates factor numbers and orders them according to an alphabetical order: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(factor(c(\"hello\", \"goodbye\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1\n```\n:::\n:::\n\n\n:::\n\nThis behavior of the `factor()` function feels unexpected. \n\nAnother example is how the function will silently make a missing value because the values in the data and the levels do not match.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(\"a\", levels=\"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] <NA>\nLevels: c\n```\n:::\n:::\n\n\nThe **unfortunate behavior of factors in R** has led to an online movement against the default behavior of many data import functions to make factors out of any variable composed as strings. \n\nThe tidyverse is part of this movement, with functions from the `readr` package defaulting to leaving strings as-is. (Others have chosen\nto add `options(stringAsFactors=FALSE)` into their start up commands.)\n\n## Factors when modeling data \n\nFactors are still necessary for some data analytic tasks. The most salient\ncase is in modeling.\n\nWhen you pass a factor variable into `lm()` or `glm()`, R automatically creates indicator (or more colloquially ‘dummy’) variables for each of the levels and picks one as a reference group.\n\nFor simple cases, this behavior can also be achieved with a character vector. However, to choose which level to use as a reference level or to order classes, factors must be used. \n\n:::{.callout-tip}\n\n### Example\n\nConsider a vector of character strings with three income levels: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_level <- c(rep(\"low\",10), \n                  rep(\"medium\",10), \n                  rep(\"high\",10))\nincome_level\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"   \n [9] \"low\"    \"low\"    \"medium\" \"medium\" \"medium\" \"medium\" \"medium\" \"medium\"\n[17] \"medium\" \"medium\" \"medium\" \"medium\" \"high\"   \"high\"   \"high\"   \"high\"  \n[25] \"high\"   \"high\"   \"high\"   \"high\"   \"high\"   \"high\"  \n```\n:::\n:::\n\n\nHere, it might make sense to use the lowest income level (low) as the reference class so that all the other coefficients can be interpreted in comparison to it. \n\nHowever, R would use high as the reference by default because ‘h’ comes before ‘l’ in the alphabet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(income_level)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] low    low    low    low    low    low    low    low    low    low   \n[11] medium medium medium medium medium medium medium medium medium medium\n[21] high   high   high   high   high   high   high   high   high   high  \nLevels: high low medium\n```\n:::\n\n```{.r .cell-code}\ny <- rnorm(30)\nlm(y ~ x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x)\n\nCoefficients:\n(Intercept)         xlow      xmedium  \n    0.04280     -0.33189     -0.08482  \n```\n:::\n:::\n\n:::\n\n\n\n## Factors are more memory-efficient than character strings\n\nConsider a large character string such as `income_level` corresponding to a categorical variable. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pryr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'pryr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    compose, partial\n```\n:::\n\n```{.r .cell-code}\nincome_level <- c(rep(\"low\",10000), \n                  rep(\"medium\",10000), \n                  rep(\"high\",10000))\n\nobject_size(income_level) # computes the size of the character string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n240.22 kB\n```\n:::\n\n```{.r .cell-code}\nobject_size(factor(income_level)) # computes the size of the factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n120.63 kB\n```\n:::\n:::\n\n\nIn early versions of R, storing categorical data as a factor variable was considerably more efficient than storing the same data as strings, because factor variables only store the factor labels once. \n\nHowever, R now uses a global string pool, so each unique string is only stored once, which means storage is now less of an issue. \n\n\n# `forcats`\n\nNext, we will introduce the `forcats` package, which is part of the core `tidyverse`, but can also be loaded directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\n```\n:::\n\n\n\nIt provides tools for dealing with **cat**egorical variables (and it's an anagram of factors!) using a wide range of helpers for working with factors.\n\n## General Social Survey\n\nFor the rest of this chapter, we're going to use the `forcats::gss_cat` dataset.\nIt's a sample of data from the [General Social Survey](https://gss.norc.org), a long-running US survey conducted by the independent research organization NORC at the University of Chicago.\nThe survey has thousands of questions, so in `gss_cat`. \n\nI have selected a handful that will illustrate some common challenges you will encounter when working with factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21,483 × 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   <int> <fct>         <int> <fct> <fct>          <fct>      <fct> <fct>   <int>\n 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n# … with 21,473 more rows\n```\n:::\n:::\n\n\n(Remember, since this dataset is provided by a package, you can get more information about the variables with `?gss_cat`.)\n\nWhen factors are stored in a tibble, you cannot see their levels so easily.\nOne way to view them is with `count()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  count(race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  race      n\n  <fct> <int>\n1 Other  1959\n2 Black  3129\n3 White 16395\n```\n:::\n:::\n\n\nOr with a bar chart:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(race)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){fig-alt='A bar chart showing the distribution of race. There are ~2000 records with race \"Other\", 3000 with race \"Black\", and other 15,000 with race \"White\".' width=672}\n:::\n:::\n\n\nWhen working with factors, the two most common operations are changing the order of the levels, and changing the values of the levels.\nThose operations are described in the sections below.\n\n\n## Modifying factor order\n\nIt's often useful to **change the order of the factor levels** in a visualization.\n\nFor example, imagine you want to explore the average number of hours spent watching TV per day across religions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary <- gss_cat %>% \n  group_by(relig) %>% \n  summarise(age = mean(age, na.rm = TRUE),\n            tvhours = mean(tvhours, na.rm = TRUE),\n            n = n())\n\nggplot(relig_summary, aes(tvhours, relig)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){fig-alt='A scatterplot of with tvhours on the x-axis and religion on the y-axis. The y-axis is ordered seemingly aribtrarily making it hard to get any sense of overall pattern.' width=672}\n:::\n:::\n\n\nIt is hard to read this plot because there's no overall pattern.\n\nWe can improve it by **reordering the levels** of `relig` using `fct_reorder()`.\n`fct_reorder(f, x, fun)` takes three arguments:\n\n-   `f`, the factor whose levels you want to modify.\n-   `x`, a numeric vector that you want to use to reorder the levels.\n-   Optionally, `fun`, a function that's used if there are multiple values of `x` for each value of `f`. The default value is `median`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary %>% \n  ggplot(aes(tvhours, fct_reorder(relig, tvhours))) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-alt='The same scatterplot as above, but now the religion is displayed in increasing order of tvhours. \"Other eastern\" has the fewest tvhours under 2, and \"Don\\'t know\" has the highest (over 5).' width=672}\n:::\n:::\n\n\nReordering religion makes it much easier to see that people in the \"Don't know\" category watch much more TV, and Hinduism & Other Eastern religions watch much less.\n\nAs you start making more complicated transformations, we recommend moving them out of `aes()` and into a separate `mutate()` step.\nFor example, you could rewrite the plot above as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary %>% \n  mutate(relig = fct_reorder(relig, tvhours)) %>% \n  ggplot(aes(tvhours, relig)) +\n    geom_point()\n```\n:::\n\n\nWhat if we create a similar plot looking at how average age varies across reported income level?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrincome_summary <- \n  gss_cat %>% \n  group_by(rincome) %>% \n  summarise(age = mean(age, na.rm = TRUE),\n            tvhours = mean(tvhours, na.rm = TRUE),\n            n = n())\n\nrincome_summary %>% \n  ggplot(aes(age, fct_reorder(rincome, age))) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-alt='A scatterplot with age on the x-axis and income on the y-axis. Income has been reordered in order of average age which doesn\\'t make much sense. One section of the y-axis goes from $6000-6999, then <$1000, then $8000-9999.' width=672}\n:::\n:::\n\n\nHere, arbitrarily reordering the levels isn't a good idea!\nThat's because `rincome` already has a principled order that we shouldn't mess with.\n\nReserve `fct_reorder()` for factors whose levels are arbitrarily ordered.\n\nHowever, it does make sense to pull \"Not applicable\" to the front with the other special levels.\n\nYou can use `fct_relevel()`.\n\nIt takes a factor, `f`, and then any number of levels that you want to move to the front of the line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrincome_summary %>% \n  ggplot(aes(age, fct_relevel(rincome, \"Not applicable\"))) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-alt='The same scatterplot but now \"Not Applicable\" is displayed at the bottom of the y-axis. Generally there is a positive association between income and age, and the income band with the highest average age is \"Not applicable\".' width=672}\n:::\n:::\n\n\nWhy do you think the average age for \"Not applicable\" is so high?\n\nAnother type of reordering is useful when you are coloring the lines on a plot.\n`fct_reorder2(f, x, y)` reorders the factor `f` by the `y` values associated with the largest `x` values.\n\nThis makes the plot easier to read because the colors of the line at the far right of the plot will line up with the legend.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nby_age <- \n  gss_cat %>% \n  filter(!is.na(age)) %>% \n  count(age, marital) %>% \n  group_by(age) %>% \n  mutate(prop = n / sum(n))\n\nby_age %>% \n  ggplot(aes(age, prop, colour = marital)) +\n    geom_line(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-alt='A line plot with age on the x-axis and proportion on the y-axis. There is one line for each category of marital status: no answer, never married, separated, divorced, widowed, and married. It is a little hard to read the plot because the order of the legend is unrelated to the lines on the plot.\n' width=384}\n:::\n\n```{.r .cell-code}\nby_age %>% \n  ggplot(aes(age, prop, colour = fct_reorder2(marital, age, prop))) +\n    geom_line() +\n  labs(colour = \"marital\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-2.png){fig-alt='Rearranging the legend makes the plot easier to read because the legend colours now match the order of the lines on the far right of the plot. You can see some unsuprising patterns: the proportion never marred decreases with age, married forms an upside down U shape, and widowed starts off low but increases steeply after age 60.' width=384}\n:::\n:::\n\n\nFinally, for bar plots, you can use `fct_infreq()` to order levels in decreasing frequency: this is the simplest type of reordering because it doesn't need any extra variables.\nCombine it with `fct_rev()` if you want them in increasing frequency so that in the bar plot largest values are on the right, not the left.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%  \n  ggplot(aes(marital)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-alt='A bar char of marital status ordered in from least to most common: no answer (~0), separated (~1,000), widowed (~2,000), divorced (~3,000), never married (~5,000), married (~10,000).' width=672}\n:::\n:::\n\n\n## Modifying factor levels\n\nMore powerful than changing the orders of the levels is changing their values.\nThis allows you to clarify labels for publication, and collapse levels for high-level displays.\n\nThe most general and powerful tool is `fct_recode()`.\nIt allows you to recode, or change, the value of each level.\nFor example, take the `gss_cat$partyid`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   partyid                n\n   <fct>              <int>\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490\n```\n:::\n:::\n\n\nThe levels are terse and inconsistent.\nLet's tweak them to be longer and use a parallel construction.\nLike most rename and recoding functions in the tidyverse, the new values go on the left and the old values go on the right:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  mutate(partyid = fct_recode(partyid,\n      \"Republican, strong\"    = \"Strong republican\",\n      \"Republican, weak\"      = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\"        = \"Not str democrat\",\n      \"Democrat, strong\"      = \"Strong democrat\")) %>% \n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   partyid                   n\n   <fct>                 <int>\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Republican, strong     2314\n 5 Republican, weak       3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Democrat, weak         3690\n10 Democrat, strong       3490\n```\n:::\n:::\n\n\n`fct_recode()` will leave the levels that aren't explicitly mentioned as is, and will warn you if you accidentally refer to a level that doesn't exist.\n\nTo combine groups, you can assign multiple old levels to the same new level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  mutate(partyid = fct_recode(partyid,\n      \"Republican, strong\"    = \"Strong republican\",\n      \"Republican, weak\"      = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\"        = \"Not str democrat\",\n      \"Democrat, strong\"      = \"Strong democrat\",\n      \"Other\"                 = \"No answer\",\n      \"Other\"                 = \"Don't know\",\n      \"Other\"                 = \"Other party\")) %>% \n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  partyid                   n\n  <fct>                 <int>\n1 Other                   548\n2 Republican, strong     2314\n3 Republican, weak       3032\n4 Independent, near rep  1791\n5 Independent            4119\n6 Independent, near dem  2499\n7 Democrat, weak         3690\n8 Democrat, strong       3490\n```\n:::\n:::\n\n\nUse this technique with care: if you group together categories that are truly different you will end up with misleading results.\n\nIf you want to collapse a lot of levels, `fct_collapse()` is a useful variant of `fct_recode()`.\nFor each new variable, you can provide a vector of old levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  mutate(partyid = fct_collapse(partyid,\n      \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n      \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n      \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      \"dem\" = c(\"Not str democrat\", \"Strong democrat\"))) %>% \n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  partyid     n\n  <fct>   <int>\n1 other     548\n2 rep      5346\n3 ind      8409\n4 dem      7180\n```\n:::\n:::\n\n\nSometimes you just want to lump together the small groups to make a plot or table simpler.\n\nThat's the job of the `fct_lump_*()` family of functions.\n`fct_lump_lowfreq()` is a simple starting point that progressively lumps the smallest groups categories into \"Other\", always keeping \"Other\" as the smallest category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  mutate(relig = fct_lump_lowfreq(relig)) %>% \n  count(relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  relig          n\n  <fct>      <int>\n1 Protestant 10846\n2 Other      10637\n```\n:::\n:::\n\n\nIn this case it's not very helpful: it is true that the majority of Americans in this survey are Protestant, but we'd probably like to see some more details!\nInstead, we can use the `fct_lump_n()` to specify that we want exactly 10 groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  mutate(relig = fct_lump_n(relig, n = 10)) %>% \n  count(relig, sort = TRUE) %>% \n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   relig                       n\n   <fct>                   <int>\n 1 Protestant              10846\n 2 Catholic                 5124\n 3 None                     3523\n 4 Christian                 689\n 5 Other                     458\n 6 Jewish                    388\n 7 Buddhism                  147\n 8 Inter-nondenominational   109\n 9 Moslem/islam              104\n10 Orthodox-christian         95\n```\n:::\n:::\n\n\nRead the documentation to learn about `fct_lump_min()` and `fct_lump_prop()` which are useful in other cases.\n\n## Ordered factors\n\nBefore we go on, there's a special type of factor that needs to be mentioned briefly: ordered factors.\nOrdered factors, created with `ordered()`, imply a strict ordering and equal distance between levels: the first level is \"less than\" the second level by the same amount that the second level is \"less than\" the third level, and so on..\nYou can recognize them when printing because they use `<` between the factor levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordered(c(\"a\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] a b c\nLevels: a < b < c\n```\n:::\n:::\n\n\nIn practice, `ordered()` factors behave very similarly to regular factors.\nThere are only two places where you might notice different behavior:\n\n-   If you map an ordered factor to color or fill in ggplot2, it will default to `scale_color_viridis()`/`scale_fill_viridis()`, a color scale that implies a ranking.\n-   If you use an ordered function in a linear model, it will use \"polygonal contrasts\". These are mildly useful, but you are unlikely to have heard of them unless you have a PhD in Statistics, and even then you probably don't routinely interpret them. If you want to learn more, we recommend `vignette(\"contrasts\", package = \"faux\")` by Lisa DeBruine.\n\nGiven the arguable utility of these differences, we don't generally recommend using ordered factors.\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Explore the distribution of `rincome` (reported income).\n    What makes the default bar chart hard to understand?\n    How could you improve the plot?\n\n2.  What is the most common `relig` in this survey?\n    What's the most common `partyid`?\n\n3.  Which `relig` does `denom` (denomination) apply to?\n    How can you find out with a table?\n    How can you find out with a visualization?\n    \n4.  There are some suspiciously high numbers in `tvhours`.\n    Is the mean a good summary?\n\n5.  For each factor in `gss_cat` identify whether the order of the levels is arbitrary or principled.\n\n6.  Why did moving \"Not applicable\" to the front of the levels move it to the bottom of the plot?\n\n7.  How have the proportions of people identifying as Democrat, Republican, and Independent changed over time?\n\n8.  How could you collapse `rincome` into a small set of categories?\n\n9.  Notice there are 9 groups (excluding other) in the `fct_lump` example above.\n    Why not 10?\n    (Hint: type `?fct_lump`, and find the default for the argument `other_level` is \"Other\".)\n\n\n:::\n\n### Additional Resources\n\n::: callout-tip\n\n- <https://r4ds.had.co.nz/factors>\n- [Wrangling Categorical Data in R](https://peerj.com/preprints/3163) by Amelia McNamara, Nicholas J Horton\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}